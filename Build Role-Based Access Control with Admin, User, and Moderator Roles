//src/routes/app.js
const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Secret key for JWT
const SECRET_KEY = 'mysecretkey';

// Dummy users
const users = [
  { id: 1, username: 'adminuser', password: 'admin123', role: 'Admin' },
  { id: 2, username: 'moduser', password: 'mod123', role: 'Moderator' },
  { id: 3, username: 'regularuser', password: 'user123', role: 'User' }
];

// Login route
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);

  if (!user) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }

  const token = jwt.sign(
    { id: user.id, username: user.username, role: user.role },
    SECRET_KEY,
    { expiresIn: '1h' }
  );

  res.json({ token });
});

// Middleware to verify JWT
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) return res.status(401).json({ message: 'Token required' });

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid or expired token' });
    req.user = user;
    next();
  });
}

// Middleware for role authorization
function authorizeRoles(...roles) {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: 'Access denied: insufficient role' });
    }
    next();
  };
}

// Admin-only route
app.get('/admin-dashboard', authenticateToken, authorizeRoles('Admin'), (req, res) => {
  res.json({
    message: 'Welcome to the Admin dashboard.',
    user: req.user
  });
});

// Moderator-only route
app.get('/moderator-panel', authenticateToken, authorizeRoles('Moderator'), (req, res) => {
  res.json({
    message: 'Welcome to the Moderator panel.',
    user: req.user
  });
});

// General user route
app.get('/user-profile', authenticateToken, authorizeRoles('User', 'Admin', 'Moderator'), (req, res) => {
  res.json({
    message: 'Welcome to your profile, ' + req.user.username + '.',
    user: req.user
  });
});

// Start server
const PORT = 3000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
